---
description: Python testing
globs: tests/**/*.py
alwaysApply: false
---
Use pytest 

Always run specific test files
Run test with "pytest tests/{path to test file}"

Create tests in tests/ and in the correct module directory

Avoid mocking not necessary when using APIs or remote resources. 


## Using Storage in Tests

When testing components that use storage, use the following pattern to specify a test directory:

```python
# In your fixture
@pytest.fixture
def file_storage(temp_dir):
    """Fixture to create a storage instance with a test directory."""
    # Reset the singleton to ensure we're starting fresh
    BaseStorage.reset_instance()
    # Create and return the new instance as the singleton with a test directory
    return BaseStorage.get_instance(storage_impl=FileStorage, base_dir=temp_dir)

@pytest.fixture(autouse=True)
def reset_storage_after_test():
    """Auto-used fixture to reset the storage singleton after each test."""
    yield
    BaseStorage.reset_instance()
```

Then inject the configured `file_storage` into your component fixtures:

```python
@pytest.fixture
def your_component(file_storage):
    """Create component that will use the test storage."""
    return YourComponent(storage=file_storage)
```

## Using Runner in Tests

When testing components that use a runner, use a similar pattern:

```python
# In your fixture
@pytest.fixture
def mock_runner():
    """Fixture to create a mock Runner."""
    runner = AsyncMock(spec=BaseRunner)
    # Set up default return values for commonly called methods
    runner.start_job.return_value = True
    runner.job_exists.return_value = False
    runner.get_job_status.return_value = JobStatus.PENDING
    return runner

# If using a real runner
@pytest.fixture
def test_runner():
    """Fixture to create a test Runner instance."""
    # Reset the singleton to ensure we're starting fresh
    BaseRunner.reset_instance()
    # Create and return a configured runner instance
    return BaseRunner.get_instance(runner_impl=AsyncioRunner)

@pytest.fixture(autouse=True)
def reset_runner_after_test():
    """Auto-used fixture to reset the runner singleton after each test."""
    yield
    BaseRunner.reset_instance()
```
