---
description: Working in the React/Typescript UI application
globs: moatless-ui/**/*.tsx
alwaysApply: false
---
# Project: moatless-ui
# Package Manager: bun
# Build Tool: vite

* Never start the app, it's already running

# Core Technologies
- React 18
- TypeScript
- Tailwind CSS
- Zustand (State Management)
- Shadcn UI
- TanStack Query (React Query)
- Sonner (Toast notifications)
- React Router DOM

# Project Root: /moatless-ui

# Directory Structure
/moatless-ui/src/
  /assets/           # Static assets like images and fonts
  
  /features/         # Domain-specific feature modules
    /trajectory/     # Trajectory feature
      /components/   # Feature-specific components
      /hooks/        # Feature-specific hooks
      /store/        # Local state management
      /types.ts      # Feature types
      /utils.ts      # Feature utilities
      /api/          # Feature API calls and types
    
    /settings/       # Settings feature
      /components/
      /hooks/
      /store/
      /types.ts
      /utils.ts
      /api/
    
    /swebench/       # SWEBench evaluation feature
      /components/
      /hooks/
      /store/
      /types.ts
      /utils.ts
      /api/
  
  /layouts/          # Global layout components
    RootLayout.tsx
    SettingsLayout.tsx
  
  /lib/             # Shared code and utilities
    /api/           # Global API services
      config.ts     # API configuration and base request handler
    /components/    # Shared UI components
      /ui/          # Shadcn UI components
    /hooks/         # Shared hooks
    /stores/        # Global state stores
    /types/         # Global TypeScript types
    /utils/         # Shared utilities
  
  /pages/           # Route components
    /home/
    /settings/
      /agents/
        /[id]/
          index.tsx
        layout.tsx
        index.tsx
    /trajectory/
    /swebench/
      /validate/

# Path Aliases
@/*             -> src/*
@features/*     -> src/features/*
@layouts/*      -> src/layouts/*
@lib/*          -> src/lib/*
@pages/*        -> src/pages/*

# Code Style
- Use spaces instead of tabs
- Use single quotes for strings
- Use semicolons
- Use TypeScript strict mode
- Use React functional components
- Use hooks for state/effects
- Prefer arrow functions for component definitions
- Use explicit return types for functions/components when non-obvious

# API and Data Fetching
- Use TanStack Query (React Query) for all data fetching and mutations
- Define query keys in hooks for reusability
- Structure API files as follows:
  - Define TypeScript interfaces for request/response types
  - Export a const apiObject with methods for each endpoint
  - Use the apiRequest utility from @/lib/api/config
- Create custom hooks for each API operation:
  - API GET operations: use useQuery
  - API mutations (POST/PUT/DELETE): use useMutation
  - Always invalidate relevant queries in the onSuccess callback
  - Prefix hook names with "use" (e.g., useEvaluation, useStartEvaluation)

# API Hook Patterns
- Query hooks (GET operations):
```typescript
export function useResourceName(id: string) {
  return useQuery({
    queryKey: resourceKeys.detail(id),
    queryFn: () => apiClient.getResource(id),
  });
}
```

- Mutation hooks (POST/PUT/DELETE operations):
```typescript
export function useUpdateResource() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: apiClient.updateResource,
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: resourceKeys.all });
      queryClient.invalidateQueries({ 
        queryKey: resourceKeys.detail(variables.id) 
      });
    },
  });
}
```

# Error Handling
- Use toast notifications (Sonner) for user feedback
- Handle errors in the component calling the hook, not in the hook itself
- Provide meaningful error messages to users

# Routing
- Use React Router DOM for routing
- Define routes in src/App.tsx
- Use the useNavigate hook for programmatic navigation
- Use the Link component for navigation links

# State Management
- Use Zustand for state management
- Global stores in /lib/stores/
- Feature-specific stores in feature/store/
- Prefer local React state (useState, useReducer) for component-specific state
- Use React Context only when necessary for deeply nested components

# UI Components
- Always use Shadcn UI components when available
- Install new components: bun x shadcn@latest add [component]
- Use Tailwind CSS for styling
- Use the clsx and tailwind-merge utilities for conditional styling
- Use Lucide React for icons

# Component Props
- Define props using TypeScript interfaces
- Use descriptive prop names
- Provide default values when appropriate
- Destructure props in the function signature

# Component Best Practices
- Keep components small and focused
- Extract reusable UI elements into separate components
- Use composition for complex UIs
- Follow naming conventions:
  - Components: PascalCase (e.g., EvaluationToolbar)
  - Hooks: camelCase with use prefix (e.g., useEvaluation)
  - API: camelCase with api suffix (e.g., evaluationApi)

# Form Handling
- Use React Hook Form for complex forms
- Validate inputs using Zod schemas

# Toast Notifications
- Use Sonner for toast notifications
- Include success/error handling for all user actions
- Keep messages concise and helpful
