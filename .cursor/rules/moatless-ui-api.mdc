---
description: 
globs: moatless-ui/lib/api, moatless-ui/lib/hooks
---
# API and Data Fetching
- Use React Query (TanStack Query) for data fetching and cache management
- Follow API layer separation pattern:


/moatless-ui/lib/api/
  - Contains API endpoint definitions
  - Each feature has its own API file (e.g., models.ts)
  - Use apiRequest utility from config.ts
  - Export const with feature name + 'Api' (e.g., modelsApi)

Example API structure:
```typescript
export const featureApi = {
    getItems: () => apiRequest<Response>('/endpoint'),
    getItem: (id: string) => apiRequest<Item>(/endpoint/${id}),
    updateItem: (item: ItemType) => apiRequest<Item>(/endpoint/${item.id}, {
        method: 'PUT',
        body: JSON.stringify(item)
    })
};
```

/lib/hooks/
  - Contains React Query hooks
  - Each feature has its own hooks file (e.g., useModels.ts)
  - Define query keys at the top of the file
  - Export hooks for different operations (get, update, delete)

Example hooks structure:
```typescript
const featureKeys = {
    all: ['feature'] as const,
    lists: () => [...featureKeys.all, 'list'] as const,
    details: () => [...featureKeys.all, 'detail'] as const,
    detail: (id: string) => [...featureKeys.details(), id] as const,
};
    export function useFeatureList() {
    return useQuery({
    queryKey: featureKeys.lists(),
    queryFn: () => featureApi.getItems()
    });
}
export function useFeature(id: string) {
    return useQuery({
        queryKey: featureKeys.detail(id),
        queryFn: () => featureApi.getItem(id),
        enabled: !!id,
    });
}

export function useUpdateFeature() {
    const queryClient = useQueryClient();
    return useMutation({
        mutationFn: featureApi.updateItem,
        onSuccess: (data) => {
        queryClient.invalidateQueries({ queryKey: featureKeys.lists() });
    },
    });
}
